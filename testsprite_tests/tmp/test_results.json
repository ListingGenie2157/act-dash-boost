[
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "29dd33fa-0469-4cf2-a361-f7fdf12fbf94",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC001-Onboarding Completion with Data Persistence",
    "description": "Verify that new users can complete the multi-step onboarding wizard within 90 seconds, with data persistence across page refreshes and correct routing to diagnostic or plan start.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Create one' button to start new user registration and onboarding\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/ol/li/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Create one' button to start new user registration and onboarding\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password to create a new account\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser123@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword!123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email input and enter a new valid email address, then attempt to create account again\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sign in' button to check if existing user login is possible or if there is an alternative onboarding start\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try a different valid email format or check if there is a guest or test user login option to proceed with onboarding\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('test.user+onboard@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword!123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to create a new account again with a different valid email or check if there is a guest or test user login option to proceed with onboarding\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Check if there is a guest or test user login option or alternative onboarding start method to proceed with onboarding testing\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to refresh the page to check if the form resets or if there is any change in error state\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The onboarding flow cannot be tested because account creation and login attempts fail with 'Invalid login credentials' error. No alternative login or guest access is available. Please fix the authentication issue to enable onboarding flow testing.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271608129096//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.159Z",
    "modified": "2025-09-19T08:46:48.290Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "f7605c57-144a-45f6-b387-f2e2f8c5786f",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC002-Diagnostic Assessment Flow and Personalized Study Plan Generation",
    "description": "Ensure diagnostic test completes successfully in about 30 minutes, results display with per-section and overall scores, and a personalized 7-day study plan is generated with scheduled reviews.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password and click Sign In button to authenticate.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Create one' button to start account creation for a new user to proceed with testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the Create Account button to submit the form and create the new user account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email input field, enter a valid email 'testuser@example.com' (correcting any hidden invalid characters), then click Create Account button again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email input field, enter a valid email 'testuser@example.com' with a different domain 'example.com' to avoid validation error, then click Create Account button again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try a different valid email format, e.g., 'testuser123@example.com', clear the email field, input the new email, and click Create Account button again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser123@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Sign in' button to return to the login page and check if there is an alternative way to proceed, such as guest access or password reset, to continue testing the diagnostic test functionality.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email input field, enter a valid email 'testuser@example.com' (try a different valid email format), input the password, and click Sign In button to attempt login again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Create one' button to start account creation for a new user to proceed with testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email and password fields, input a new valid email 'newuser@example.com' and password 'NewPassword123', then click Create Account button to try creating a new account again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('newuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('NewPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Sign in' button to return to the login page and report the email validation issue to the development team as it blocks all progress.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: diagnostic test did not complete successfully or results not displayed as expected.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to critical email validation error blocking account creation and login. Cannot proceed to diagnostic test or study plan generation. Issue reported to development team.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/175827173109634//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.167Z",
    "modified": "2025-09-19T08:48:51.231Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "15a26115-f6cc-423f-987d-4bf6d0f5208c",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC003-Daily Drills Answer Persistence and Review Queue",
    "description": "Validate daily untimed drills retain answers across page refreshes, provide explanations for each question, and enqueue incorrectly answered questions for spaced repetition review mode.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password and click Sign In button to authenticate.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Create one' button to navigate to account creation page or retry login with correct credentials.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Create Account' button to attempt account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email address to a valid format and attempt to create the account again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email address to a valid format (e.g., testuser@example.com) and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to persistent email validation error on account creation form. Valid email addresses are incorrectly rejected, blocking account creation and preventing further progress on the task to validate daily drills and spaced repetition features.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271512897548//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.174Z",
    "modified": "2025-09-19T08:45:13.071Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "379b8a35-6d96-4bed-9727-79f6577b98d5",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC004-Timed Section Simulator Functionality and Autosave",
    "description": "Verify timed ACT section simulator loads content correctly, shuffles answer choices, persists answers and timer state through refresh, applies accommodations multipliers accurately, provides mid-section resume, and calculates final score with detailed summary.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password and click Sign In button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Create one' button to create a new account or find alternative way to start simulation\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click Create Account button to create the account and proceed\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing due to critical issue: The Create Account page rejects a valid email address as invalid, preventing account creation and login. Unable to proceed with verifying the timed ACT section simulator features.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271455166166//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.181Z",
    "modified": "2025-09-19T08:44:15.289Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "eaef3e32-2254-4ee4-8e4d-ea05436f2450",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC005-Full ACT Test Simulation with Section Pausing and Resume",
    "description": "Test the full test simulation process with back-to-back ACT sections, ability to pause and resume each section, and correct per-section result reporting consistent across sessions.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password and click Sign In button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Retry login with correct credentials or handle login failure.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('CorrectPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Create one' button to start account creation process to enable login and proceed with test simulation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click Create Account button to create new user account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email address format to a valid one and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email address format to a valid one and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email address format to a valid one and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try a different valid email format and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate back to Sign In page to attempt login with existing credentials or try a different approach.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to login with a different valid email or handle the rate limit error to proceed with the test simulation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('CorrectPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to login with a different valid email or handle the invalid credentials error to proceed.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('CorrectPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Create one' button to attempt account creation again or try alternative approach.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Sign in' button to navigate back to login page and try alternative login or approach.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The full ACT test simulation process could not be completed due to persistent login failures and account creation issues. The system repeatedly rejected valid email formats and blocked account creation attempts with rate limit errors. Login attempts with provided credentials failed with 'Invalid login credentials' errors. As a result, the test simulation could not be started, paused, resumed, or completed. This is a critical blocker preventing further testing of the ACT preparation application. Please address the authentication and account creation issues to enable full end-to-end testing.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 429 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271700099606//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.187Z",
    "modified": "2025-09-19T08:48:20.264Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "5d2c2cae-ea4a-44b1-84c2-3f7ecc3b7a0f",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC006-Spaced Repetition Review Mode Scheduling and Feedback",
    "description": "Ensure review mode presents due review items according to spaced repetition intervals, shows previous attempts and explanations, and allows user feedback to reschedule or mark items as mastered.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password and click Sign In button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Create one' button to create a new account for testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the Create Account button to attempt account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email input field, enter a valid email address 'testuser@example.com' (correct format), and resubmit the Create Account form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing due to critical issue: The Create Account form blocks valid email addresses with an invalid email error, preventing account creation and access to the app. Cannot proceed with spaced repetition review mode testing until this is fixed.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271492376177//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.193Z",
    "modified": "2025-09-19T08:44:52.550Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "578c26a0-e796-4721-b6eb-62518b1b5d70",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC007-Admin TSV Content Import with Idempotency and Error Handling",
    "description": "Verify that only authorized admin users can upload TSV question content, duplicate entries are skipped without side effects, and errors are reported clearly with graceful fallback.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password for non-admin user and click Sign In button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Non-admin user login failed due to invalid credentials. Cannot verify access denial for non-admin user without valid credentials. Please provide valid non-admin user credentials or allow proceeding with admin user login test.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271392872595//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.199Z",
    "modified": "2025-09-19T08:43:13.017Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "0f6fbf50-4aeb-44b4-b08b-dec798de7c07",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC008-Dashboard Load Performance and Accurate Progress Metrics",
    "description": "Confirm that dashboard loads within 1 second on repeat visits using cached data and displays accurate real-time progress metrics including accuracy, streaks, XP counters, and recommended next actions.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password and click Sign In to load dashboard for first time\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login failed due to invalid credentials, preventing access to dashboard. Cannot proceed with dashboard load time and metric validation tests. Issue reported.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271416568838//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.205Z",
    "modified": "2025-09-19T08:43:36.700Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "da0f4d8c-bb18-4295-8ad8-c278cf0dede9",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC009-Row-Level Security Enforcement and Cross-User Data Isolation",
    "description": "Validate strict enforcement of row-level security policies to prevent any cross-user data access including negative tests with unauthorized direct API attempts.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input User A password and click Sign In to access own data through UI.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('UserAPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: Expected result unknown, generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to login failure for User A. Cannot validate row-level security policies without successful login. Please resolve login issues and retry.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271421933377//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.211Z",
    "modified": "2025-09-19T08:43:42.116Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "7aa34911-f9bc-4d18-8b6a-7b6e44b8c9f6",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC010-Accessibility Compliance Across Key User Interfaces",
    "description": "Ensure all core pages and components comply with accessibility standards including keyboard navigation support, ARIA labels presence, and toggles for reduced motion and dyslexia-friendly fonts.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Test keyboard navigation through login form inputs and buttons\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to onboarding page using keyboard only\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login attempts failed due to invalid credentials, blocking access to core pages required for accessibility testing. Reporting the issue and stopping further testing until valid credentials are provided.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271441180196//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.217Z",
    "modified": "2025-09-19T08:44:01.328Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "90b7ba54-15ef-42e1-a295-5006ca675230",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC011-Error Handling and Fallback UI Display",
    "description": "Verify comprehensive error handling across the app with proper display of fallback UIs for loading failures, data retrieval errors, and empty states in all primary modules.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input email and password, then click Sign In to proceed to dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The comprehensive error handling verification task could not be completed because the login attempt failed with 'Invalid login credentials'. This prevented access to the dashboard and other primary modules where fallback UIs for loading failures, data retrieval errors, and empty states need to be tested. The login failure issue has been reported. Please resolve the authentication problem to enable further testing.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271433049246//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.223Z",
    "modified": "2025-09-19T08:43:53.195Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "4ff057d0-3c79-41cc-8201-5ea48d4f1618",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC012-Offline Support and Queued Answer Syncing",
    "description": "Test offline mode by disconnecting network during drills and simulations, verify answers queue up locally, and upon reconnection, answers sync correctly to backend without loss.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input password and click Sign In button to authenticate.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Create one' button to create a new account for testing offline mode.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the Create Account button to attempt account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email input to a valid format and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email input to a valid format (e.g., testuser@example.com) and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Change email input to a valid format (e.g., testuser@example.com) and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email input to a valid format (e.g., testuser@example.com) and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try a different valid email format to bypass the email validation error and retry account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Switch to login page and try to login with existing credentials or use a different email to create account after waiting for rate limit reset.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Wait or use existing credentials to login and proceed with offline mode testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to use a different known valid test account or reset password to login and proceed with offline mode testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('ValidPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to proceed with offline mode testing due to repeated login failures with test accounts. Account creation is blocked by email validation and rate limiting. Recommend verifying test account credentials or providing a valid test account to continue testing. Task stopped.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 429 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271692962655//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.241Z",
    "modified": "2025-09-19T08:48:13.113Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "a1b7bfaf-b89f-438a-9e0f-205fcd171a4e",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC013-Parent Portal Read-Only Access and Data Accuracy",
    "description": "Ensure parent users have secure read-only access to student progress and reports, with accurate data displayed and no ability to modify student data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input parent user password and click Sign In button to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('parentpassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Check if there is a password reset or account creation option to recover or create a parent account for testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the email and password fields with parent user credentials and click 'Create Account' to create the parent account linked to student.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('parentuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('parentpassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Correct the email format or try a different valid email address format to create the parent account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('parentuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to use a different valid email address format or check if there are specific email domain restrictions for account creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('parentuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try a different email domain or format, such as 'parentuser@test.com' or 'parentuser@localhost', to bypass email validation and create the parent account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('parentuser@test.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Return to login page and attempt to use any available 'Sign in' option or alternative method to access parent account or request valid credentials from admin.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to create or login to a parent account. The system blocks valid email formats as invalid, preventing further testing of parent user access to student progress and reports. Please provide valid parent credentials or fix email validation to continue.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/auth/v1/signup:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271579499463//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.266Z",
    "modified": "2025-09-19T08:46:19.640Z"
  },
  {
    "projectId": "d0079e08-e8cc-4bf5-803d-d3198920db0b",
    "testId": "093ffad3-dbfa-466f-bd8f-398d08a10de2",
    "userId": "04489458-2001-7024-3063-8fd114e6a10e",
    "title": "TC014-Strict TypeScript Compliance and Test Coverage",
    "description": "Validate that the codebase compiles with zero TypeScript errors and all features have comprehensive unit and integration test suites with passing results.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Run full TypeScript compile check\n        await page.goto('http://localhost:8080/ts-compile-check', timeout=10000)\n        \n\n        # Return to home page to find alternative navigation or options to run compile check and tests\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Reported the issue about missing compile check and test execution options. Stopping further actions as the task cannot be completed in the current environment.\nBrowser Console Logs:\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)\n[ERROR] 404 Error: User attempted to access non-existent route: /ts-compile-check (at http://localhost:8080/src/pages/NotFound.tsx:27:16)\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[WARNING] ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath. (at http://localhost:8080/node_modules/.vite/deps/react-router-dom.js?v=e1cd82b1:4392:12)\n[ERROR] Failed to load resource: the server responded with a status of 401 () (at https://hhbkmxrzxcswwokmbtbz.supabase.co/functions/v1/days-left:0:0)\n[ERROR] Error fetching days left: FunctionsHttpError: Edge Function returned a non-2xx status code\n    at FunctionsClient.<anonymous> (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1360:17)\n    at Generator.next (<anonymous>)\n    at fulfilled (http://localhost:8080/node_modules/.vite/deps/@supabase_supabase-js.js?v=e1cd82b1:1277:24) (at http://localhost:8080/src/components/CountdownHeader.tsx:46:24)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/04489458-2001-7024-3063-8fd114e6a10e/1758271401490279//tmp/test_task/result.webm",
    "created": "2025-09-19T08:41:21.300Z",
    "modified": "2025-09-19T08:43:21.655Z"
  }
]
