1. Summary

Vite + React + TypeScript app for ACT prep with Supabase (Postgres, Auth, RLS, Edge Functions). Core flows: onboarding, daily drills, timed sections, diagnostic, review (spaced repetition), progress dashboard, and secure admin import. Mobile-first; PWA optional.

Primary users: U.S. high-school students (grades 9–12).
Secondary: Parents/guardians (read-only), teachers later (post-MVP).

Goals
	•	Raise ACT scores with realistic practice and adaptive weak-area focus.
	•	Keep students engaged via streaks/XP and reminders.
	•	Provide transparent progress and pacing insight.

Non-Goals (MVP)
	•	SAT/PSAT, AI tutor chat, marketplace, heavy social features, complex payments/SIS.

⸻

2. Success Metrics
	•	Activation: ≥60% of new signups complete onboarding + first session within 24h.
	•	Engagement: D7 retention ≥35% complete ≥3 sessions.
	•	Learning: ≥10-pt median increase in percent-correct on top 3 weak skills over 7 days.
	•	Reliability: Session loss rate <0.5% (crash/refresh does not drop progress).
	•	Security: RLS tests pass; zero cross-user data reads/writes.

⸻

3. Scope (MVP feature set)

3.1 Onboarding Wizard

Purpose: collect consent, test date, accommodations, goals, prefs; route to diagnostic or plan.

Requirements
	•	Steps: Age 13+, TOS/Privacy; Test date; Accommodations (100/150/200% time); Daily minutes (15/25/40) + preferred window; Email reminders + quiet hours; Accessibility (reduced motion, dyslexia font); Start mode (diagnostic or daily).
	•	Writes:
	•	user_prefs(user_id, email_ok, push_ok=false, quiet_start, quiet_end, reduced_motion, dyslexia_font)
	•	goal(user_id, test_date, daily_target_minutes, preferred_window)
	•	accommodations(user_id, time_multiplier)
	•	Gate: dashboard hidden until all three rows exist.

Acceptance
	•	New user reaches first activity ≤90s; data persists; refresh resumes.

⸻

3.2 Diagnostic (Quick)

Purpose: baseline weak topics; seed 7-day plan.

Requirements
	•	25–30 min path using existing section engine.
	•	End summary: per-section accuracy, top-3 weak skills, estimated scaled score (percent→36 shim).
	•	Create initial study plan; enqueue wrong items in review_queue due at +2 days.

Acceptance
	•	Finishing diagnostic immediately unlocks a 7-day plan and due reviews.

⸻

3.3 Drills (Untimed)

Purpose: focused practice on weak topics.

Requirements
	•	Fetch pool by subject/skills; sample with weak-area weighting.
	•	Persist each answer as an attempt row (see 6. Data).
	•	End mini-summary; wrong answers to review_queue.

Acceptance
	•	Attempt persistence survives refresh; explanations available on review.

⸻

3.4 Timed Sections / Simulator

Purpose: realistic ACT sections.

Requirements
	•	Inputs: form_id, section, base time; apply accommodations multiplier.
	•	Render v_form_section ORDER BY ord.
	•	Choice shuffling only; persist choice_order, correct_idx, selected_idx, question_ord per item.
	•	Summary: raw score, estimated scaled, time breakdown per item.

Acceptance
	•	Refresh mid-section resumes; grading is index-based and consistent with review.

⸻

3.5 Full Test Simulator (Lite)

Purpose: all four sections back-to-back; autosave between sections.

Acceptance
	•	Produces per-section results; resume after navigation/refresh.

⸻

3.6 Review Mode (Spaced Repetition)

Purpose: retention on past mistakes.

Requirements
	•	Query due items review_queue where due_at <= now().
	•	Show prior attempt, explanation; reschedule 2d→7d→21d (or ease-based).

Acceptance
	•	Wrong answers from any mode show up in review on schedule.

⸻

3.7 Dashboard

Purpose: progress snapshots.

Requirements
	•	Cards: accuracy by subject/skill, time per question, streaks/XP (simple counters), upcoming review count, next activity CTA.

Acceptance
	•	Loads under 1s on repeat visits (cached via TanStack Query).

⸻

3.8 Admin Import (Secure)

Purpose: seed content.

Requirements
	•	Admin route guarded by rpc:is_admin().
	•	TSV import via Edge Function (service role); idempotent by sha256(lower(stem)).
	•	Client has no direct write to staging.

Acceptance
	•	Upload populates forms/passages/questions/form_questions; dupes skipped.

⸻

4. User Stories & Acceptance
	1.	As a student, I can complete onboarding and start either a diagnostic or plan.
→ Onboarding saves rows; redirect works; resuming onboarding restores state.
	2.	As a student, I can take a timed section with accommodations.
→ Timers reflect multiplier; answers persist; summary shown.
	3.	As a student, my wrong answers return for review later.
→ Review due count >0 within 48h; rescheduling works.
	4.	As an admin, I can import a form TSV safely.
→ Only admins allowed; import is idempotent; errors surfaced.

⸻

5. Flows (high level)
	•	Onboarding: Welcome → Age/TOS → Test date → Accommodations → Goals/Window → Email/Quiet hours → Accessibility → Start option → Redirect.
	•	Timed section: Fetch content → For each item: shuffle choices, answer, persist → Timer ends or user submits → Summary → Review enqueue.
	•	Review: Fetch due → Flip card UX → Mark “Got it” → Reschedule.

⸻

6. Data Model & Contracts

Content (read-only to clients via RLS)
	•	forms(id, label, is_active)
	•	passages(id, form_id, section, passage_type, title, passage_text)
	•	questions(id, stem, answer, choice_a..d, difficulty, explanation, skill_id, time_limit_secs?)
	•	form_questions(form_id, section, ord, question_id, passage_id?)
	•	skills(...)
	•	v_form_section view joins the above for render.

User-owned (RLS write-own)
	•	sessions(id, user_id, form_id, section, mode, time_limit_sec, started_at, ended_at)
	•	attempts(id, user_id, form_id, question_id, question_ord, choice_order int[4], correct_idx smallint, selected_idx smallint?, created_at, updated_at)
	•	sim_results(id, user_id, section, raw_score, time_stats_json, started_at, ended_at) (optional)
	•	review_queue(user_id, question_id, due_at, interval_days, ease?, lapses?, created_at?)
	•	progress/mastery (aggregates or view)
	•	user_prefs(...), goal(...), accommodations(...)
	•	study_plan_days(...), study_tasks(...)
	•	Optional: parents, parent_links, rewards_*

RLS
	•	Content: SELECT using (true) only. No client writes.
	•	User-owned: enable row level security; using (auth.uid() = user_id) with check (auth.uid() = user_id).

Choice shuffling contract
	•	Never change question order (ord).
	•	Per item: compute order = shuffle([0..3]), correct_idx = order.indexOf(baseIdx).
	•	Persist choice_order, correct_idx, selected_idx, question_ord.
	•	Grade selected_idx === correct_idx.
	•	Review reconstructs choices with stored choice_order.

Timers
	•	EN 45m, MATH 60m, RD 35m, SCI 35m; multiply by accommodations.time_multiplier/100.

Scoring
	•	Raw = correct count.
	•	Scaled = monotone percent→36 shim (labeled “estimate”).

⸻

7. Non-Functional Requirements
	•	Performance: Code-split routes; cached content via TanStack Query; virtualize long lists; target FCP <1.8s on mid-range Android after warm cache.
	•	Reliability: Autosave per answer; resume after refresh; offline queue (post-MVP if needed).
	•	Security/Privacy: RLS enforced; no service role on client; 13+ affirmation; optional parent email; “Not affiliated with ACT” disclosure.
	•	Accessibility: WCAG 2.2 AA basics; keyboard nav; focus outlines; ARIA labels; reduced motion; dyslexia font toggle.
	•	Observability: ErrorBoundary + Sentry (or similar); log key events (see §9).

⸻

8. Notifications (MVP email only)
	•	Store prefs in user_prefs (email_ok, quiet_start/end).
	•	Edge Function + SMTP/Resend to send:
	•	Review due
	•	Missed plan day
	•	Weekly recap (optional)
	•	Respect quiet hours window.

⸻

9. Analytics/Telemetry (events)
	•	onboarding_start/saved
	•	diagnostic_started/completed
	•	session_started/completed
	•	answer_submitted (incl. section, question_id, time_ms, correctness)
	•	review_due_shown/completed
	•	plan_generated
	•	streak_updated

Each event should include: user_id, section, form_id?, skill_id?, time_ms, correctness.

⸻

10. Release Criteria (QA gates)
	•	RLS negative tests prove user B cannot read/write user A’s rows.
	•	Import of 1k items completes idempotently; dupes skipped by stem hash.
	•	Timed engine safe on refresh; autosave per answer.
	•	Choice shuffling: grading consistent with review reconstruction.
	•	If PWA: offline drill answers sync on reconnect.
	•	A11y smoke: keyboard-only completes a session; screen-reader labels present.
	•	Error states: loading, empty, and failure UIs on all data paths.
	•	Zero TypeScript errors with strict: true.

⸻

11. Dependencies
	•	Supabase project (Auth, Postgres, Storage, Edge Functions).
	•	Email provider (SMTP/Resend) if notifications enabled.
	•	Content TSVs for at least:
	•	1 diagnostic, 2 practice forms per section, and 200+ reviewable items.

⸻

12. Risks & Mitigations
	•	Data leakage via RLS misconfig: maintain test user pair in CI to assert isolation.
	•	Fragile import path: move all imports to Edge Function; never client direct writes.
	•	Performance on low-end phones: keep bundle lean; lazy routes; avoid unnecessary re-renders.
	•	Content quality: enforce lint checks on TSVs (dup ids, empty choices, skew).

⸻

13. Milestones
	•	M1: Onboarding + Timed engine green
Onboarding saved rows, timers with accommodations, attempts persisted, resume works.
	•	M2: Diagnostic + Review
Diagnostic summary and plan generation; review queue functioning.
	•	M3: Admin import + Dashboard
Secure TSV import; progress cards; basic streaks/XP.
	•	M4: Polishing
Error states, a11y, observability, and release QA.

⸻

14. Open Questions
	•	Do we ship PWA offline in MVP, or post-MVP?
	•	Parent snapshot email in MVP or later?
	•	Do we include Writing (essay) at all? Default: out of scope.
	•	Are streaks/XP strictly client counters, or backed in DB with rewards?

⸻

15. Engineering Tickets (starter set)
	1.	Onboarding Wizard: page + save + route guard.
	2.	Timed Section: choice shuffle persistence + timer with accommodations.
	3.	Diagnostic: quick path + summary + seed plan.
	4.	Review Page: due queue + reschedule 2/7/21 days.
	5.	Admin Import: Edge Function; secure RLS.
	6.	Dashboard: progress cards + next actions.
	7.	Scoring Shim: monotone percent→36 + tests.
	8.	RLS Tests: negative access checks in Vitest/Playwright.

⸻

16. Appendix: Admin TSV format
subject,form_id,section,ord,passage_title,passage_body,stem,
choice_a,choice_b,choice_c,choice_d,correct_label,difficulty,
topics,explanation

•	Idempotency key: sha256(lower(stem))